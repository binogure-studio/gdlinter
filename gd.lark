// GDScript grammar for Lark

// NOTE: Work in progress!!! (XXX TODO)
// This grammar should parse all GDScript code successfully (non-typed),
// but the resulting parse-tree is still not well-organized.

// Start symbols for the grammar:
//       single_input is a single interactive statement;
//       file_input is a module or sequence of commands read from an input file;
//       eval_input is the input for the eval() functions.
// NB: compound_stmt in single_input is followed by extra NEWLINE!
single_input: _NEWLINE | simple_stmt | compound_stmt _NEWLINE
file_input: (_NEWLINE)* (tooldef _NEWLINE extenddef | extenddef | stmt) (_NEWLINE | stmt)*
eval_input: testlist _NEWLINE*

tooldef: "tool" -> tool
static_funcdef: "static" funcdef
funcdef: "func" NAME "(" parameters? ")" [funcdef_extend] ":" suite
funcdef_extend: "." "(" parameters? ")"
signaldef: "signal" NAME "(" parameters? ")" -> signal

parameters: paramvalue ("," paramvalue)*

?paramvalue: typedparam ["=" test]
?typedparam: NAME [":" test]

varargslist: (vfpdef ["=" test] ("," vfpdef ["=" test])*)

vfpdef: NAME

?stmt: simple_stmt | compound_stmt
?simple_stmt: small_stmt (";" small_stmt)* [";"] _NEWLINE
?small_stmt: (expr_stmt | pass_stmt | flow_stmt | global_stmt | var_stmt | const_stmt | assert_stmt | enum_stmt)
?expr_stmt: testlist_expr (annassign | augassign (yield_expr|testlist)
         | ("=" (yield_expr|testlist_expr))*)
annassign: ":" test ["=" test]
?testlist_expr: test ("," test)* [","]
!augassign: ("+=" | "-=" | "*=" | "@=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" | "**=" | "//=")
// For normal and annotated assignments, additional restrictions enforced by the interpreter
enum_stmt: "enum" NAME "{" [enum_comp] "}" -> enum
pass_stmt: "pass" -> noop
?flow_stmt: break_stmt | continue_stmt | return_stmt | yield_stmt
break_stmt: "break" -> noop
continue_stmt: "continue" -> noop
return_stmt: "return" [testlist]
yield_stmt: yield_expr

!dots: "."+
dotted_name: NAME ("." NAME)*
export_stmt: "export" ["(" NAME ("," test)* ")"] -> export
setget_stmt: "setget" [NAME] ["," NAME] -> setget
onready_stmt: "onready" -> onready
var_def: "var" NAME -> var
var_stmt: [export_stmt | onready_stmt] var_def ["=" test] [setget_stmt]
const_stmt: "const" NAME "=" test -> const
global_stmt: "global" NAME ("," NAME)*
assert_stmt: "assert" test ["," test]

compound_stmt: if_stmt | while_stmt | for_stmt | funcdef | static_funcdef | classdef | signaldef
if_stmt: "if" test ":" suite (first_elif_stmt)* [else_stmt]
first_elif_stmt: "elif" test ":" suite (elif_stmt)*
elif_stmt: "elif" test ":" suite
else_stmt: "else" ":" suite
while_stmt: "while" test ":" suite
for_stmt: "for" exprlist "in" testlist ":" suite
// NB compile.c makes sure that the default except clause is last
suite: simple_stmt | _NEWLINE _INDENT stmt+ _DEDENT

?test: or_test ["if" or_test "else" test]
?test_nocond: or_test
?or_test: and_test ("or" and_test)*
?and_test: not_test ("and" not_test)*
?not_test: "not" not_test -> not
         | comparison
?comparison: expr (_comp_op expr)*
?expr: xor_expr ("|" xor_expr)*
?xor_expr: and_expr ("^" and_expr)*
?and_expr: shift_expr ("&" shift_expr)*
?shift_expr: arith_expr (_shift_op arith_expr)*
?arith_expr: term (_add_op term)*
?term: factor (_mul_op factor)*
?factor: _factor_op factor | atom_expr

!_factor_op: "+"|"-"|"~"
!_add_op: "+"|"-"
!_shift_op: "<<"|">>"
!_mul_op: "*"|"@"|"/"|"%"|"//"
// <> isn't actually a valid comparison operator in Python. It's here for the
// sake of a __future__ import described in PEP 401 (which really works :-)
!_comp_op: "<"|">"|"=="|">="|"<="|"<>"|"!="|"in"|"not" "in"|"is"|"is" "not"

?atom_expr: atom_expr "(" [arguments] ")"    -> funccall
          | atom_expr "[" subscriptlist "]"  -> getitem
          | atom_expr "." NAME               -> getattr
          | "." NAME                         -> funccall
          | atom

?atom: "(" [yield_expr|testlist_comp] ")" -> tuple
     | "[" [testlist_comp] "]"  -> list
     | "{" [dictorsetmaker] "}" -> dict
     | NAME
     | number | string+
     | "(" test ")"
     | "..." -> ellipsis
     | "None"    -> const_none
     | "True"    -> const_true
     | "False"   -> const_false

enum_comp: (NAME | NAME "=" DEC_NUMBER) ("," NAME | "," NAME "=" DEC_NUMBER)* [","]
?testlist_comp: test [comp_for | ("," test)+ [","] | ","]
subscriptlist: subscript ("," subscript)* [","]
subscript: test | [test] ":" [test] [sliceop]
sliceop: ":" [test]
exprlist: expr ("," expr)* [","]
testlist: test ("," test)* [","]
dictorsetmaker: ( (test (":" | "=") test (comp_for | ("," test (":" | "=") test)* [","])) | (test (comp_for | ("," test)* [","])) )

classdef: "class" NAME extenddef? ":" suite
extenddef: "extends" (NAME | STRING)

arguments: argvalue ("," argvalue)*
         | test comp_for

?argvalue: test ["=" test]

comp_iter: comp_for | comp_if
comp_for: "for" exprlist "in" or_test [comp_iter]
comp_if: "if" test_nocond [comp_iter]

// not used in grammar, but may appear in "node" passed from Parser to Compiler
encoding_decl: NAME

yield_expr: "yield" [yield_arg]
yield_arg: testlist

number: DEC_NUMBER | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER | FLOAT_NUMBER | IMAG_NUMBER
string: STRING | LONG_STRING | NULL_TOKEN

// Tokens
NAME: /[a-zA-Z_]\w*/
COMMENT: /#[^\n]*/
_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+


STRING : /[ubf]?r?("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i
LONG_STRING: /[ubf]?r?(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?''')/is
NULL_TOKEN: "null"
DEC_NUMBER: /0|[1-9]\d*/i
HEX_NUMBER.2: /0x[\da-f]*/i
OCT_NUMBER.2: /0o[0-7]*/i
BIN_NUMBER.2 : /0b[0-1]*/i
FLOAT_NUMBER.2: /((\d+\.\d*|\.\d+)(e[-+]?\d+)?|\d+(e[-+]?\d+))/i
IMAG_NUMBER.2: /\d+j/i | FLOAT_NUMBER "j"i

%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
%declare _INDENT _DEDENT

